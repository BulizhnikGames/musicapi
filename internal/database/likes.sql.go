// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: likes.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getSongsLikeCount = `-- name: GetSongsLikeCount :one
SELECT COUNT(*) FROM likes
WHERE song_id = $1
`

func (q *Queries) GetSongsLikeCount(ctx context.Context, songID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getSongsLikeCount, songID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUsersLikedSongs = `-- name: GetUsersLikedSongs :many
SELECT songs.id, songs.created_at, songs.updated_at, songs.name, songs.album_id FROM songs
JOIN likes ON likes.song_id = songs.id
WHERE likes.user_id = $1
ORDER BY songs.name ASC
`

func (q *Queries) GetUsersLikedSongs(ctx context.Context, userID uuid.UUID) ([]Song, error) {
	rows, err := q.db.QueryContext(ctx, getUsersLikedSongs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Song
	for rows.Next() {
		var i Song
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.AlbumID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const likeSong = `-- name: LikeSong :one
INSERT INTO likes (user_id, song_id)
VALUES ($1, $2)
RETURNING user_id, song_id
`

type LikeSongParams struct {
	UserID uuid.UUID
	SongID uuid.UUID
}

func (q *Queries) LikeSong(ctx context.Context, arg LikeSongParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, likeSong, arg.UserID, arg.SongID)
	var i Like
	err := row.Scan(&i.UserID, &i.SongID)
	return i, err
}
