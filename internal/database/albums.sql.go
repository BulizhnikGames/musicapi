// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: albums.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAlbum = `-- name: CreateAlbum :one
INSERT INTO albums (id, created_at, updated_at, name, artist_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, name, artist_id
`

type CreateAlbumParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	ArtistID  uuid.UUID
}

func (q *Queries) CreateAlbum(ctx context.Context, arg CreateAlbumParams) (Album, error) {
	row := q.db.QueryRowContext(ctx, createAlbum,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.ArtistID,
	)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ArtistID,
	)
	return i, err
}

const getAlbumByID = `-- name: GetAlbumByID :one
SELECT id, created_at, updated_at, name, artist_id FROM albums
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAlbumByID(ctx context.Context, id uuid.UUID) (Album, error) {
	row := q.db.QueryRowContext(ctx, getAlbumByID, id)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ArtistID,
	)
	return i, err
}

const getAlbumByNameAndArtist = `-- name: GetAlbumByNameAndArtist :one
SELECT id, created_at, updated_at, name, artist_id FROM albums
WHERE name = $1 AND artist_id = $2
LIMIT 1
`

type GetAlbumByNameAndArtistParams struct {
	Name     string
	ArtistID uuid.UUID
}

func (q *Queries) GetAlbumByNameAndArtist(ctx context.Context, arg GetAlbumByNameAndArtistParams) (Album, error) {
	row := q.db.QueryRowContext(ctx, getAlbumByNameAndArtist, arg.Name, arg.ArtistID)
	var i Album
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ArtistID,
	)
	return i, err
}

const getAlbumsArtist = `-- name: GetAlbumsArtist :one
SELECT users.name FROM users
JOIN albums ON albums.artist_id = users.id
WHERE albums.id = $1
`

func (q *Queries) GetAlbumsArtist(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getAlbumsArtist, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const getAlbumsByName = `-- name: GetAlbumsByName :many
SELECT id, created_at, updated_at, name, artist_id FROM albums
WHERE name = $1
ORDER BY updated_at DESC
`

func (q *Queries) GetAlbumsByName(ctx context.Context, name string) ([]Album, error) {
	rows, err := q.db.QueryContext(ctx, getAlbumsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Album
	for rows.Next() {
		var i Album
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.ArtistID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAlbums = `-- name: GetAllAlbums :many
SELECT id, created_at, updated_at, name, artist_id FROM albums
ORDER BY name ASC
`

func (q *Queries) GetAllAlbums(ctx context.Context) ([]Album, error) {
	rows, err := q.db.QueryContext(ctx, getAllAlbums)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Album
	for rows.Next() {
		var i Album
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.ArtistID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArtistsAlbums = `-- name: GetArtistsAlbums :many
SELECT id, created_at, updated_at, name, artist_id FROM albums
WHERE artist_id = $1
ORDER BY updated_at DESC
`

func (q *Queries) GetArtistsAlbums(ctx context.Context, artistID uuid.UUID) ([]Album, error) {
	rows, err := q.db.QueryContext(ctx, getArtistsAlbums, artistID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Album
	for rows.Next() {
		var i Album
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.ArtistID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
