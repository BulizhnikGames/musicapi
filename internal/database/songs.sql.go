// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: songs.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSong = `-- name: CreateSong :one
INSERT INTO songs (id, created_at, updated_at, name, album_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, name, album_id
`

type CreateSongParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	AlbumID   uuid.UUID
}

func (q *Queries) CreateSong(ctx context.Context, arg CreateSongParams) (Song, error) {
	row := q.db.QueryRowContext(ctx, createSong,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.AlbumID,
	)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.AlbumID,
	)
	return i, err
}

const deleteSongByID = `-- name: DeleteSongByID :exec
DELETE FROM songs
WHERE id = $1
`

func (q *Queries) DeleteSongByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSongByID, id)
	return err
}

const getAlbumsSongs = `-- name: GetAlbumsSongs :many
SELECT id, created_at, updated_at, name, album_id FROM songs
WHERE album_id = $1
ORDER BY updated_at ASC
`

func (q *Queries) GetAlbumsSongs(ctx context.Context, albumID uuid.UUID) ([]Song, error) {
	rows, err := q.db.QueryContext(ctx, getAlbumsSongs, albumID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Song
	for rows.Next() {
		var i Song
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.AlbumID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSongs = `-- name: GetAllSongs :many
SELECT id, created_at, updated_at, name, album_id FROM songs
ORDER BY name ASC
`

func (q *Queries) GetAllSongs(ctx context.Context) ([]Song, error) {
	rows, err := q.db.QueryContext(ctx, getAllSongs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Song
	for rows.Next() {
		var i Song
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.AlbumID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSongsByName = `-- name: GetSongsByName :many
SELECT id, created_at, updated_at, name, album_id FROM songs
WHERE name = $1
ORDER BY updated_at DESC
`

func (q *Queries) GetSongsByName(ctx context.Context, name string) ([]Song, error) {
	rows, err := q.db.QueryContext(ctx, getSongsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Song
	for rows.Next() {
		var i Song
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.AlbumID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSongsByNameAndArtist = `-- name: GetSongsByNameAndArtist :many
SELECT songs.id, songs.created_at, songs.updated_at, songs.name, songs.album_id FROM songs
JOIN artists_songs ON songs.id = artists_songs.song_id
WHERE songs.name = $1 AND artists_songs.artist_id = $2
ORDER BY songs.updated_at DESC
`

type GetSongsByNameAndArtistParams struct {
	Name     string
	ArtistID uuid.UUID
}

func (q *Queries) GetSongsByNameAndArtist(ctx context.Context, arg GetSongsByNameAndArtistParams) ([]Song, error) {
	rows, err := q.db.QueryContext(ctx, getSongsByNameAndArtist, arg.Name, arg.ArtistID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Song
	for rows.Next() {
		var i Song
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.AlbumID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
